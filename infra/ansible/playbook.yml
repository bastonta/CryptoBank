- name: Update system
  hosts: all

  tasks:
    - name: Upgrade system
      apt:
        upgrade: dist
        update_cache: yes


- name: Setup frontend
  hosts: frontend

  tasks:
    - name: Install nginx
      apt:
        name: nginx

    - name: Remove default nginx config
      file:
        name: /etc/nginx/sites-enabled/default
        state: absent

    - name: Install system nginx config
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf

    - name: Install nginx site for HTTP site
      template:
        src: templates/nginx-http.j2
        dest: /etc/nginx/sites-enabled/http

    - name: Reload nginx to activate HTTP site
      service:
        name: nginx
        state: restarted

    - name: Recursively change ownership
      file:
        path: /var/www/html
        state: directory
        recurse: yes
        owner: www-data
        group: www-data

    - name: Reboot a machine
      reboot:
        test_command: uptime


- name: Setup backend
  hosts: backend
  vars:
    docker_compose_dir: /srv/cryptobank-webapi

  tasks:
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        update_cache: true

    - name: Create docker compose directory
      file:
        path: "{{ docker_compose_dir }}"
        state: directory

    - name: Install docker compose config
      template:
        src: templates/docker-compose.yml.j2
        dest: "{{ docker_compose_dir }}/docker-compose.yml"

    - name: Reboot a machine
      reboot:
        test_command: uptime


- name: Setup PostgreSQL
  hosts: database
  vars:
    postgres_version: "16"
    postgres_bin_path: "/usr/lib/postgresql/{{ postgres_version }}/bin"
    postgres_config_dir: "/etc/postgresql/{{ postgres_version }}/main"
    postgres_volume_dir: "/mnt/HC_Volume_{{ database_volume_id }}"
    postgres_data_dir: "{{ postgres_volume_dir }}/data"

  tasks:
    - name: Add Postgres apt key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc

    - name: Add PostgreSQL repository
      apt_repository:
        repo: deb https://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main

    - name: Install packages
      apt:
        name:
          - "postgresql-{{postgres_version}}"
          - "postgresql-contrib-{{postgres_version}}"
          - libpq-dev
          - python3-psycopg2
        update_cache: true
        state: present

    - name: Set volume directory owner
      file:
        path: "{{ postgres_volume_dir }}"
        owner: postgres
        group: postgres
        mode: "755"

    - name: Check if PostgreSQL is initialized
      stat:
        path: "{{ postgres_data_dir }}/pg_hba.conf"
      register: postgres_data

    - name: Empty data dir
      file:
        path: "{{ postgres_data_dir }}"
        state: absent
      when: not postgres_data.stat.exists

    - name: Initialize PostgreSQL
      shell: "{{ postgres_bin_path }}/initdb -D {{ postgres_data_dir }}"
      become: true
      become_user: postgres
      when: not postgres_data.stat.exists

    - name: Stop service
      service:
        name: postgresql
        state: stopped
        enabled: yes

    - name: Allow connections from backend
      lineinfile:
        state: present
        path: "{{ postgres_config_dir }}/pg_hba.conf"
        line: "host all {{ postgres_user }} {{ backend_ip }}/32 scram-sha-256"

    - name: Allow connections from internal network
      lineinfile:
        path: "{{ postgres_config_dir }}/postgresql.conf"
        regexp: "^(.*)listen_addresses(.*)$"
        line: "listen_addresses = '{{ database_ip }}, localhost'"
        backrefs: yes

    - name: Start and enable service
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Create DB user
      community.postgresql.postgresql_user:
        state: present
        name: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        role_attr_flags: LOGIN,CREATEDB
      become: true
      become_user: postgres

    - name: Reboot a machine
      reboot:
        test_command: uptime
